generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id                          Int             @id @default(autoincrement())
  streamer                    String?         @db.VarChar(12)
  name                        StreamCategory?
  streamer_categoryTostreamer Streamer?       @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stream                      Stream[]
}

model Donation {
  id                          String    @id @default(uuid())
  isPaid                      Boolean   @default(false) @db.Boolean
  streamer                    String    @db.VarChar(12)
  socketDonor                 String?   @db.VarChar(20)
  amount                      Float     @default(0)
  message                     String?   @default("") @db.VarChar(256)
  displayTimeSeconds          Int?      @default(0)
  subaddress                  String    @db.VarChar(95)
  confirmations               Int?      @default(0)
  giphyUrl                    String?   @default("") @db.VarChar(100)
  donor                       String?   @default("") @db.VarChar(24)
  timestamp                   DateTime? @default(now()) @db.Timestamp(6)
  played                      DateTime?
  streamer_donationTostreamer Streamer? @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model DonationSetting {
  streamer      String   @id @db.VarChar(12)
  secondPrice   Int?     @default(0)
  charPrice     Float?   @default(0)
  charLimit     Int?     @default(140)
  minAmount     Int?     @default(0)
  gifsMinAmount Float?   @default(0)
  goal          Float?   @default(0)
  goalProgress  Float?   @default(0) @db.Real
  goalReached   Boolean? @default(false)
  // animation
  url           String   @unique @default(uuid())
  size          Int?
  color         String?  @db.VarChar(10)

  streamer_donation_settingsTostreamer Streamer @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// Payment to the TipXMR provider
model Transaction {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  transactionKey String?  @unique
  amount         Float?   @default(0)
  isConfirmed    Boolean  @default(false)
  isUnlocked     Boolean  @default(false)
  invoice        Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId      Int?
}

model Invoice {
  id         Int       @id @default(autoincrement())
  streamerId String?   @db.VarChar(12)
  startDate  DateTime? @db.Timestamp(6)
  endDate    DateTime? @db.Timestamp(6)

  payedAmount    Float? @default(0)
  expectedAmount Float? @default(0)

  planType                   PlanType?
  paidStatus                 PaidStatus?
  subaddress                 String       @db.VarChar(95)
  transaction                Transaction[]
  streamer_invoiceTostreamer Streamer?     @relation(fields: [streamerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ServerXmrSetting {
  id                     Int @id @default(autoincrement())
  currentSubaddressIndex Int @default(1)
  restoreHeight          Int @default(2000000)
}

model Stream {
  streamerId                String    @id @db.VarChar(12)
  url                       String?   @db.VarChar(100)
  platform                  Platform?
  language                  Language?
  category                  Int?
  category_categoryTostream Category? @relation(fields: [category], references: [id], onDelete: NoAction, onUpdate: NoAction)
  streamer_streamTostreamer Streamer  @relation(fields: [streamerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Streamer {
  id              String           @id @db.VarChar(12)
  name            String           @unique @db.VarChar(20)
  alias           String           @unique @db.VarChar(24)
  socket          String?          @unique @db.VarChar(20)
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @default(now()) @updatedAt
  isOnline        Boolean          @default(false) @db.Boolean
  status          Status?
  category        Category[]
  donation        Donation[]
  donationSetting DonationSetting?
  invoice         Invoice[]
  stream          Stream?
  wallet          Wallet?

  // Nextauth
  accounts Account[]
  sessions Session[]

  @@index([name], name: "streamer_name")
}

model Wallet {
  streamer                  String   @id @db.VarChar(12)
  restoreHeight             Int?     @default(0)
  lastSyncHeight            Int?     @default(0)
  streamer_streamerTowallet Streamer @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum StreamCategory {
  gaming
  learning
  talk
  erotics
}

enum Language {
  english
  german
  french
  italian
}

enum PaidStatus {
  paid
  unpaid
  canceled
}

enum PlanType {
  basic
  premium
}

enum Platform {
  youtube
  twitch
  chaturbate
  selfhosted
}

enum Status {
  active
  closed
}

// Necessary for Next auth
model Account {
  id                String   @id @default(cuid())
  streamerId        String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              Streamer @relation(fields: [streamerId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  streamerId   String
  expires      DateTime
  user         Streamer @relation(fields: [streamerId], references: [id], onDelete: Cascade)
}

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     posts         Post[]
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  streamer                   String    @id @db.VarChar(12)
  createdAt                  DateTime  @default(now()) @db.Timestamp(6)
  status                     Statuses?
  streamer_accountTostreamer Streamer  @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Animation {
  id                           Int       @id @default(autoincrement())
  streamer                     String?   @db.VarChar(12)
  size                         Int?
  color                        String?   @db.VarChar(10)
  streamer_animationTostreamer Streamer? @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Category {
  id                          Int         @id @default(autoincrement())
  streamer                    String?     @db.VarChar(12)
  name                        Categories?
  streamer_categoryTostreamer Streamer?   @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stream                      Stream[]
}

model Donation {
  id                          Int       @id @default(autoincrement())
  isPaid                      Boolean     @default(false) @db.Boolean
  streamer                    String?   @db.VarChar(12)
  amount                      Float     @default(0)
  message                     String?   @db.VarChar(256) @default("")
  displayTimeSeconds          Int?      @default(0)
  subaddress                  String?   @db.VarChar(95)
  confirmations               Int?      @default(0)
  giphyUrl                    String?   @db.VarChar(100) @default("")
  donor                       String?   @db.VarChar(24) @default("")
  timestamp                   DateTime? @db.Timestamp(6) @default(now())
  streamer_donationTostreamer Streamer? @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model DonationSettings {
  streamer                             String   @id @db.VarChar(12)
  secondPrice                          Int?     @default(0)
  charPrice                            Float?   @default(0)
  charLimit                            Int?     @default(140)
  minAmount                            Int?     @default(0)
  gifsMinAmount                        Float?   @default(0)
  goal                                 Float?   @default(0)
  goalProgress                         Float?   @db.Real @default(0)
  goalReached                          Boolean? @default(false)
  streamer_donation_settingsTostreamer Streamer @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Invoice {
  id                         Int            @id @default(autoincrement())
  streamer                   String?        @db.VarChar(12)
  startDate                  DateTime?      @db.Timestamp(6)
  endDate                    DateTime?      @db.Timestamp(6)
  planType                   PlanTypes?
  paidStatus                 PaidStatuses?
  subaddress                 String?        @db.VarChar(95)
  streamer_invoiceTostreamer Streamer?      @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Stream {
  streamer                  String     @id @db.VarChar(12)
  url                       String?    @db.VarChar(100)
  platform                  Platforms?
  language                  Languages?
  category                  Int?
  category_categoryTostream Category?  @relation(fields: [category], references: [id], onDelete: NoAction, onUpdate: NoAction)
  streamer_streamTostreamer Streamer   @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Streamer {
  id               String             @id @db.VarChar(12)
  name             String             @unique @db.VarChar(20)
  alias            String             @unique @db.VarChar(24)
  socket           String?            @unique @db.VarChar(20)
  updatedAt        DateTime           @default(now()) @updatedAt
  isOnline         Boolean            @default(false) @db.Boolean
  status           Statuses?
  animation        Animation[]
  category         Category[]
  donation         Donation[]
  donationSettings Donation_settings?
  invoice          Invoice[]
  stream           Stream?
  wallet           Wallet?
  Account          Account[]
}

model Wallet {
  streamer                  String   @id @db.VarChar(12)
  restoreHeight             Int?     @default(0)
  lastSyncHeight            Int?     @default(0)
  streamer_streamerTowallet Streamer @relation(fields: [streamer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Categories {
  Gaming
  Learning
  Talk
  Erotics
}

enum Languages {
  English
  German
  French
  Italian
}

enum PaidStatuses {
  paid
  unpaid
  canceled
}

enum PlanTypes {
  basic
  premium
}

enum Platforms {
  YouTube
  Twitch
  Chaturbate
  Selfhosted
}

enum Statuses {
  active
  closed
}
